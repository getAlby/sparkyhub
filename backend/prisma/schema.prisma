// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  passwordHash String
  mnemonic     String   // Store the mnemonic needed to initialize the LN backend // TODO: later this should be encrypted
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  apps         App[]    // Relation to App model
  transactions Transaction[] // Relation to Transaction model
}

model App {
  id                     Int      @id @default(autoincrement())
  name                   String
  clientPubkey           String   @unique // Public key of the connecting NWC client
  walletServiceSecretKey String   @unique // Secret key used by this service to connect for this app
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  userId                 Int      // Foreign key to User
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation field
  transactions Transaction[] // Relation to Transaction model

  @@index([userId])
}

model Transaction {
  id             Int      @id @default(autoincrement())
  userId         Int
  appId          Int
  type           String // "incoming" or "outgoing"
  state          String   @default("pending") // "pending", "settled", or "failed"
  invoice        String   @unique
  payment_hash   String   @unique
  amount_msat    BigInt // Still BigInt for potentially large msat amounts
  fees_paid_msat Int? // Fees paid in millisatoshis (nullable for incoming, Int as requested)
  description    String?
  settled_at     DateTime?
  created_at     DateTime @default(now())
  expires_at     DateTime // Non-nullable expiry date

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  app  App  @relation(fields: [appId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([appId])
  @@index([payment_hash])
}
